import{C as m,E as c}from"./chunk-P2K7FNZD.js";import{b}from"./chunk-4VZRQQ4V.js";import{Ba as l,Y as h,ca as d,p as u}from"./chunk-42JAANS2.js";var p=class s{baseUrl=m.apiUrl;http=d(b);actualRounds=l([]);gameService=d(c);raffleNumber(t){let e=Math.floor(Math.random()*75)+1;for(;t.includes(e);)e=Math.floor(Math.random()*75)+1;return e}getPatternsByRoundId(t){return this.http.get(`${this.baseUrl}Pattern/round/${t}`)}getPatternsInfoByRoundId(t){return this.http.get(`${this.baseUrl}Pattern/round/${t}/info`)}addPatternToRound(t,e){return this.http.post(`${this.baseUrl}Pattern/round`,{roundId:t,patternId:e,active:!0}).pipe(u(r=>{r&&(this.getPatternsByRoundId(t),this.getPatternsInfoByRoundId(t))}))}updatePatternInRound(t,e){return this.http.put(`${this.baseUrl}Pattern/round`,{roundId:e,patternId:t.id,targetPrice:t.targetPrice,active:t.active}).pipe(u(r=>{r&&(this.getPatternsByRoundId(e),this.getPatternsInfoByRoundId(e))}))}deletePatternFromRound(t,e){return this.http.delete(`${this.baseUrl}Pattern/${e}/round/${t}`)}getRoundsById(t){return this.http.get(`${this.baseUrl}Round/${t}`)}getRounds(){this.gameService.createNewGame().subscribe({next:()=>this.http.get(`${this.baseUrl}Round/game/${this.gameService.actualGame()?.id}`).subscribe({next:t=>{this.actualRounds.set(t)}})})}updateRoundData(t){return this.http.put(`${this.baseUrl}Round/${t.id}`,t).subscribe({next:e=>{this.getRounds()}})}isBingoValidAndNotPassed(t,e,r){let n=t.filter(i=>i).length,a=!1;return t.forEach((i,o)=>{i&&(r.includes(e[o])||o===12)&&(r.length>0&&e[o]==r[r.length-1]&&(a=!0),n-=1)}),!(n>0)&&a}isBingoValidAndNotPassedOnAnyPattern(t,e,r){let n=!1;return t.forEach(a=>{this.isBingoValidAndNotPassed(a.patternMatrix,e,r)&&(n=!0)}),n}isBingoValid(t,e,r){let n=t.filter(a=>a).length;return t.forEach((a,i)=>{a&&(r.includes(e[i])||i===12)&&(n-=1)}),!(n>0)}existsAnyWinnerInRoundPattern(t,e){return this.http.get(`${this.baseUrl}Round/${t}/pattern/${e}/winner`)}postPrize(t){this.gameService.createNewGame().subscribe({next:()=>this.http.post(`${this.baseUrl}Prize/game/${this.gameService.actualGame()?.id}`,t).subscribe()})}postRounds(t){this.gameService.createNewGame().subscribe({next:()=>this.http.post(`${this.baseUrl}Round/game/${this.gameService.actualGame()?.id}`,t).subscribe({next:e=>{this.getRounds()}})})}getPrizesByRoundId(t){return this.http.get(`${this.baseUrl}Prize/round/${t}`)}static \u0275fac=function(e){return new(e||s)};static \u0275prov=h({token:s,factory:s.\u0275fac,providedIn:"root"})};export{p as a};
